{"version":3,"sources":["../../src/services/todoServeice.ts"],"sourcesContent":["import { HttpException } from \"@exceptions/httpException\";\nimport userModel from \"@/models/User\";\nimport todoModel from \"@/models/Todo\";\nimport { isEmpty } from \"@utils/util\";\nimport { Todo } from \"@/interfaces/todoInterface\";\nimport { CreateTodoDto, UpdateTodoDto } from \"@/dtos/todoDto\";\n\nexport default class TodoServices {\n    public users = userModel;\n    public todos = todoModel;\n\n    public async findAllTodos(query: object): Promise<Todo[]> {\n        return this.todos.find(query).select(\"-__v\");\n    }\n\n    public async findOneTodo(_id: string): Promise<Todo> {\n        if (isEmpty(_id)) throw new HttpException(400, \"_id is empty\");\n\n        const findTodo: Todo = await this.todos\n            .findOne({ _id: _id })\n            .select(\"-__v\");\n\n        if (!findTodo) throw new HttpException(409, \"Todo doesn't exist\");\n\n        return findTodo;\n    }\n    \n    public async findUserById(userId: string): Promise<Todo[]> {\n        if (isEmpty(userId)) throw new HttpException(400, \"UserId is empty\");\n\n        const findTodo: Todo[] = await this.todos\n            .find({ userId: userId })\n            .select(\"-__v\");\n\n        if (!findTodo) throw new HttpException(409, \"Todo doesn't exist\");\n\n        return findTodo;\n    }\n\n    public async createTodo(todoData: CreateTodoDto): Promise<Todo> {\n        if (isEmpty(todoData)) throw new HttpException(400, \"todoData is empty\");\n\n        return this.todos.create(todoData);\n    }\n\n    public async updateTodo(_id: string, todoData: UpdateTodoDto): Promise<Todo> {\n        if (isEmpty(todoData)) throw new HttpException(400, \"userData is empty\");\n\n        const updateTodoById: Todo = await this.todos\n            .findByIdAndUpdate(_id, todoData, { new: true })\n            .select(\"-__v\");\n        if (!updateTodoById) throw new HttpException(409, \"todo doesn't exist\");\n\n        return updateTodoById;\n    }\n\n    public async deleteTodo(_id: string): Promise<Todo> {\n        const deleteTodoById: Todo = await this.todos\n            .findByIdAndDelete(_id)\n            .select(\"-__v\");\n        if (!deleteTodoById) throw new HttpException(409, \"todo doesn't exist\");\n\n        return deleteTodoById;\n    }\n}"],"names":["TodoServices","findAllTodos","query","todos","find","select","findOneTodo","_id","isEmpty","HttpException","findTodo","findOne","findUserById","userId","createTodo","todoData","create","updateTodo","updateTodoById","findByIdAndUpdate","new","deleteTodo","deleteTodoById","findByIdAndDelete","users","userModel","todoModel"],"mappings":";;;;;;aAOqBA;;+BAPS;+CACR;+CACA;sBACE;;;;;;;;;;;;;;;;;;;AAIT,IAAA,AAAMA,eAAN,MAAMA;IAIjB,MAAaC,aAAaC,KAAa,EAAmB;QACtD,OAAO,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,OAAOG,MAAM,CAAC;IACzC;IAEA,MAAaC,YAAYC,GAAW,EAAiB;QACjD,IAAIC,IAAAA,aAAO,EAACD,MAAM,MAAM,IAAIE,4BAAa,CAAC,KAAK,gBAAgB;QAE/D,MAAMC,WAAiB,MAAM,IAAI,CAACP,KAAK,CAClCQ,OAAO,CAAC;YAAEJ,KAAKA;QAAI,GACnBF,MAAM,CAAC;QAEZ,IAAI,CAACK,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOC;IACX;IAEA,MAAaE,aAAaC,MAAc,EAAmB;QACvD,IAAIL,IAAAA,aAAO,EAACK,SAAS,MAAM,IAAIJ,4BAAa,CAAC,KAAK,mBAAmB;QAErE,MAAMC,WAAmB,MAAM,IAAI,CAACP,KAAK,CACpCC,IAAI,CAAC;YAAES,QAAQA;QAAO,GACtBR,MAAM,CAAC;QAEZ,IAAI,CAACK,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOC;IACX;IAEA,MAAaI,WAAWC,QAAuB,EAAiB;QAC5D,IAAIP,IAAAA,aAAO,EAACO,WAAW,MAAM,IAAIN,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,OAAO,IAAI,CAACN,KAAK,CAACa,MAAM,CAACD;IAC7B;IAEA,MAAaE,WAAWV,GAAW,EAAEQ,QAAuB,EAAiB;QACzE,IAAIP,IAAAA,aAAO,EAACO,WAAW,MAAM,IAAIN,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMS,iBAAuB,MAAM,IAAI,CAACf,KAAK,CACxCgB,iBAAiB,CAACZ,KAAKQ,UAAU;YAAEK,KAAK,IAAI;QAAC,GAC7Cf,MAAM,CAAC;QACZ,IAAI,CAACa,gBAAgB,MAAM,IAAIT,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOS;IACX;IAEA,MAAaG,WAAWd,GAAW,EAAiB;QAChD,MAAMe,iBAAuB,MAAM,IAAI,CAACnB,KAAK,CACxCoB,iBAAiB,CAAChB,KAClBF,MAAM,CAAC;QACZ,IAAI,CAACiB,gBAAgB,MAAM,IAAIb,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOa;IACX;;QAvDA,uBAAOE,SAAQC,aAAS;QACxB,uBAAOtB,SAAQuB,aAAS;;AAuD5B"}