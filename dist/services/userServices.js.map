{"version":3,"sources":["../../src/services/userServices.ts"],"sourcesContent":["import { hash } from \"bcrypt\";\nimport { CreateUserDto } from \"@/dtos/userDto\";\nimport { HttpException } from \"@exceptions/httpException\";\nimport { User } from \"@/interfaces/userInterface\";\nimport userModel from \"@/models/User\";\nimport { isEmpty } from \"@utils/util\";\n\n/** Admins services: getAll, createAdmin, getById, updateAdmin **/\nexport default class AdminService {\n    public users = userModel;\n\n    public async findAllUser(query: object): Promise<User[]> {\n        return this.users.find(query).select(\"-__v -password\");\n    }\n\n    public async findUserById(userId: string): Promise<User> {\n        if (isEmpty(userId)) throw new HttpException(400, \"UserId is empty\");\n\n        const findUser: User = await this.users\n            .findOne({ _id: userId })\n            .select(\"-__v -password\");\n\n        if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n        return findUser;\n    }\n\n    public async createAdmin(adminData: CreateUserDto): Promise<User> {\n        if (isEmpty(adminData)) throw new HttpException(400, \"adminData is empty\");\n\n        const findAdmin: User = await this.users.findOne({ username: adminData.username });\n        if (findAdmin) throw new HttpException(409, `This username ${adminData.username} already exists`);\n\n        adminData.password = await hash(adminData.password, 10);\n        return this.users.create(adminData);\n    }\n\n    public async updateAdmin(adminId: string, adminData: CreateUserDto): Promise<User> {\n        if (isEmpty(adminData)) throw new HttpException(400, \"adminData is empty\");\n\n        if (adminData.username) {\n            const findAdmin: User = await this.users.findOne({\n                _id: { $ne: adminId },\n                username: adminData.username\n            });\n            if (findAdmin) throw new HttpException(409, `This username ${adminData.username} already exists`);\n        }\n\n        if (adminData.password) {\n            adminData.password = await hash(adminData.password, 10);\n        }\n\n        const updateUserById: User = await this.users\n            .findByIdAndUpdate(adminId, adminData, { new: true })\n            .select(\"-__v -password\");\n        if (!updateUserById) throw new HttpException(409, \"Admin doesn't exist\");\n\n        return updateUserById;\n    }\n\n    public async deleteAdmin(userId: string): Promise<User> {\n        const deleteUserById: User = await this.users\n            .findByIdAndDelete(userId)\n            .select(\"-__v -password\");\n        if (!deleteUserById) throw new HttpException(409, \"Admin doesn't exist\");\n\n        return deleteUserById;\n    }\n}"],"names":["AdminService","findAllUser","query","users","find","select","findUserById","userId","isEmpty","HttpException","findUser","findOne","_id","createAdmin","adminData","findAdmin","username","password","hash","create","updateAdmin","adminId","$ne","updateUserById","findByIdAndUpdate","new","deleteAdmin","deleteUserById","findByIdAndDelete","userModel"],"mappings":";;;;;;aAQqBA;;wBARA;+BAES;+CAER;sBACE;;;;;;;;;;;;;;;;;;;AAGT,IAAA,AAAMA,eAAN,MAAMA;IAGjB,MAAaC,YAAYC,KAAa,EAAmB;QACrD,OAAO,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,OAAOG,MAAM,CAAC;IACzC;IAEA,MAAaC,aAAaC,MAAc,EAAiB;QACrD,IAAIC,IAAAA,aAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,mBAAmB;QAErE,MAAMC,WAAiB,MAAM,IAAI,CAACP,KAAK,CAClCQ,OAAO,CAAC;YAAEC,KAAKL;QAAO,GACtBF,MAAM,CAAC;QAEZ,IAAI,CAACK,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOC;IACX;IAEA,MAAaG,YAAYC,SAAwB,EAAiB;QAC9D,IAAIN,IAAAA,aAAO,EAACM,YAAY,MAAM,IAAIL,4BAAa,CAAC,KAAK,sBAAsB;QAE3E,MAAMM,YAAkB,MAAM,IAAI,CAACZ,KAAK,CAACQ,OAAO,CAAC;YAAEK,UAAUF,UAAUE,QAAQ;QAAC;QAChF,IAAID,WAAW,MAAM,IAAIN,4BAAa,CAAC,KAAK,CAAC,cAAc,EAAEK,UAAUE,QAAQ,CAAC,eAAe,CAAC,EAAE;QAElGF,UAAUG,QAAQ,GAAG,MAAMC,IAAAA,YAAI,EAACJ,UAAUG,QAAQ,EAAE;QACpD,OAAO,IAAI,CAACd,KAAK,CAACgB,MAAM,CAACL;IAC7B;IAEA,MAAaM,YAAYC,OAAe,EAAEP,SAAwB,EAAiB;QAC/E,IAAIN,IAAAA,aAAO,EAACM,YAAY,MAAM,IAAIL,4BAAa,CAAC,KAAK,sBAAsB;QAE3E,IAAIK,UAAUE,QAAQ,EAAE;YACpB,MAAMD,YAAkB,MAAM,IAAI,CAACZ,KAAK,CAACQ,OAAO,CAAC;gBAC7CC,KAAK;oBAAEU,KAAKD;gBAAQ;gBACpBL,UAAUF,UAAUE,QAAQ;YAChC;YACA,IAAID,WAAW,MAAM,IAAIN,4BAAa,CAAC,KAAK,CAAC,cAAc,EAAEK,UAAUE,QAAQ,CAAC,eAAe,CAAC,EAAE;QACtG,CAAC;QAED,IAAIF,UAAUG,QAAQ,EAAE;YACpBH,UAAUG,QAAQ,GAAG,MAAMC,IAAAA,YAAI,EAACJ,UAAUG,QAAQ,EAAE;QACxD,CAAC;QAED,MAAMM,iBAAuB,MAAM,IAAI,CAACpB,KAAK,CACxCqB,iBAAiB,CAACH,SAASP,WAAW;YAAEW,KAAK,IAAI;QAAC,GAClDpB,MAAM,CAAC;QACZ,IAAI,CAACkB,gBAAgB,MAAM,IAAId,4BAAa,CAAC,KAAK,uBAAuB;QAEzE,OAAOc;IACX;IAEA,MAAaG,YAAYnB,MAAc,EAAiB;QACpD,MAAMoB,iBAAuB,MAAM,IAAI,CAACxB,KAAK,CACxCyB,iBAAiB,CAACrB,QAClBF,MAAM,CAAC;QACZ,IAAI,CAACsB,gBAAgB,MAAM,IAAIlB,4BAAa,CAAC,KAAK,uBAAuB;QAEzE,OAAOkB;IACX;;QA1DA,uBAAOxB,SAAQ0B,aAAS;;AA2D5B"}