{"version":3,"sources":["../../src/services/userServices.ts"],"sourcesContent":["import { hash } from \"bcrypt\";\nimport { CreateUserDto } from \"@/dtos/userDto\";\nimport { HttpException } from \"@exceptions/httpException\";\nimport { User } from \"@/interfaces/userInterface\";\nimport userModel from \"@/models/User\";\nimport { isEmpty } from \"@utils/util\";\n\nexport default class UserService {\n  public users = userModel;\n\n  public async findAllUser(query: object): Promise<User[]> {\n    return this.users.find(query).select(\"-__v -password\");\n  }\n\n  public async findUserById(userId: string): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, \"UserId is empty\");\n\n    const findUser: User = await this.users\n      .findOne({ _id: userId })\n      .select(\"-__v -password\");\n\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, \"userData is empty\");\n\n    const findUser: User = await this.users.findOne({ username: userData.username });\n    if (findUser) throw new HttpException(409, `This username ${userData.username} already exists`);\n\n    userData.password = await hash(userData.password, 10);\n    return this.users.create(userData);\n  }\n\n  public async updateUser(userId: string, userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, \"userData is empty\");\n\n    if (userData.username) {\n      const findUser: User = await this.users.findOne({\n        _id: { $ne: userId },\n        username: userData.username\n      });\n      if (findUser) throw new HttpException(409, `This username ${userData.username} already exists`);\n    }\n\n    if (userData.password) {\n      userData.password = await hash(userData.password, 10);\n    }\n\n    const updateUserById: User = await this.users\n      .findByIdAndUpdate(userId, userData, { new: true })\n      .select(\"-__v -password\");\n    if (!updateUserById) throw new HttpException(409, \"user doesn't exist\");\n\n    return updateUserById;\n  }\n\n  public async deleteUser(userId: string): Promise<User> {\n    const deleteUserById: User = await this.users\n      .findByIdAndDelete(userId)\n      .select(\"-__v -password\");\n    if (!deleteUserById) throw new HttpException(409, \"user doesn't exist\");\n\n    return deleteUserById;\n  }\n}"],"names":["UserService","findAllUser","query","users","find","select","findUserById","userId","isEmpty","HttpException","findUser","findOne","_id","createUser","userData","username","password","hash","create","updateUser","$ne","updateUserById","findByIdAndUpdate","new","deleteUser","deleteUserById","findByIdAndDelete","userModel"],"mappings":";;;;;;aAOqBA;;wBAPA;+BAES;+CAER;sBACE;;;;;;;;;;;;;;;;;;;AAET,IAAA,AAAMA,cAAN,MAAMA;IAGnB,MAAaC,YAAYC,KAAa,EAAmB;QACvD,OAAO,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,OAAOG,MAAM,CAAC;IACvC;IAEA,MAAaC,aAAaC,MAAc,EAAiB;QACvD,IAAIC,IAAAA,aAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,mBAAmB;QAErE,MAAMC,WAAiB,MAAM,IAAI,CAACP,KAAK,CACpCQ,OAAO,CAAC;YAAEC,KAAKL;QAAO,GACtBF,MAAM,CAAC;QAEV,IAAI,CAACK,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOC;IACT;IAEA,MAAaG,WAAWC,QAAuB,EAAiB;QAC9D,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMC,WAAiB,MAAM,IAAI,CAACP,KAAK,CAACQ,OAAO,CAAC;YAAEI,UAAUD,SAASC,QAAQ;QAAC;QAC9E,IAAIL,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,cAAc,EAAEK,SAASC,QAAQ,CAAC,eAAe,CAAC,EAAE;QAEhGD,SAASE,QAAQ,GAAG,MAAMC,IAAAA,YAAI,EAACH,SAASE,QAAQ,EAAE;QAClD,OAAO,IAAI,CAACb,KAAK,CAACe,MAAM,CAACJ;IAC3B;IAEA,MAAaK,WAAWZ,MAAc,EAAEO,QAAuB,EAAiB;QAC9E,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,IAAIK,SAASC,QAAQ,EAAE;YACrB,MAAML,WAAiB,MAAM,IAAI,CAACP,KAAK,CAACQ,OAAO,CAAC;gBAC9CC,KAAK;oBAAEQ,KAAKb;gBAAO;gBACnBQ,UAAUD,SAASC,QAAQ;YAC7B;YACA,IAAIL,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,cAAc,EAAEK,SAASC,QAAQ,CAAC,eAAe,CAAC,EAAE;QAClG,CAAC;QAED,IAAID,SAASE,QAAQ,EAAE;YACrBF,SAASE,QAAQ,GAAG,MAAMC,IAAAA,YAAI,EAACH,SAASE,QAAQ,EAAE;QACpD,CAAC;QAED,MAAMK,iBAAuB,MAAM,IAAI,CAAClB,KAAK,CAC1CmB,iBAAiB,CAACf,QAAQO,UAAU;YAAES,KAAK,IAAI;QAAC,GAChDlB,MAAM,CAAC;QACV,IAAI,CAACgB,gBAAgB,MAAM,IAAIZ,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOY;IACT;IAEA,MAAaG,WAAWjB,MAAc,EAAiB;QACrD,MAAMkB,iBAAuB,MAAM,IAAI,CAACtB,KAAK,CAC1CuB,iBAAiB,CAACnB,QAClBF,MAAM,CAAC;QACV,IAAI,CAACoB,gBAAgB,MAAM,IAAIhB,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOgB;IACT;;QA1DA,uBAAOtB,SAAQwB,aAAS;;AA2D1B"}