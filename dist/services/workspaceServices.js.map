{"version":3,"sources":["../../src/services/workspaceServices.ts"],"sourcesContent":["import { HttpException } from \"@exceptions/httpException\";\nimport workspaceModel from \"@/models/Workspace\";\nimport userModel from \"@/models/User\";\nimport { isEmpty } from \"@utils/util\";\nimport { Workspace } from \"@/interfaces/workspaceInterface\";\nimport { CreateWorkspace, UpdateWorkspaceDto } from \"@/dtos/workspaceDto\";\n\nexport default class WorkspaceServices {\n    public workspaces = workspaceModel;\n    public users = userModel;\n\n    public async findAllWorkspaces(query: object): Promise<Workspace[]> {\n        return this.workspaces.find(query).select(\"-__v\");\n    }\n\n    public async findOneWorkspace(_id: string): Promise<Workspace> {\n        if (isEmpty(_id)) throw new HttpException(400, \"_id is empty\");\n\n        const findWorkspace: Workspace = await this.workspaces\n            .findOne({ _id: _id })\n            .select(\"-__v\");\n\n        if (!findWorkspace) throw new HttpException(409, \"Workspace doesn't exist\");\n\n        return findWorkspace;\n    }\n\n    public async findWorkspaceById(_id: string): Promise<Workspace[]> {\n        if (isEmpty(_id)) throw new HttpException(400, \"_id is empty\");\n\n        const findWorkspace: Workspace[] = await this.workspaces\n            .find({ _id: _id })\n            .select(\"-__v\");\n\n        if (!findWorkspace) throw new HttpException(409, \"Workspace doesn't exist\");\n\n        return findWorkspace;\n    }\n\n    public async findAllWorkspacesByUserId(userId: string): Promise<Workspace[]> {\n        if (isEmpty(userId)) throw new HttpException(400, \"userId is empty\");\n\n        const findWorkspace: Workspace[] = await this.workspaces\n            .find({ userId: userId })\n            .select(\"-__v\");\n\n        if (!findWorkspace) throw new HttpException(409, \"Workspace doesn't exist\");\n\n        return findWorkspace;\n    }\n\n    public async createWorkspace(workspaceData: CreateWorkspace): Promise<Workspace> {\n        if (isEmpty(workspaceData)) throw new HttpException(400, \"workspaceData is empty\");\n\n        return this.workspaces.create(workspaceData);\n    }\n\n    public async updateWorkspace(_id: string, workspaceData: UpdateWorkspaceDto): Promise<Workspace> {\n        if (isEmpty(workspaceData)) throw new HttpException(400, \"workspaceData is empty\");\n\n        const updateWorkspaceById: Workspace = await this.workspaces\n            .findByIdAndUpdate(_id, workspaceData, { new: true })\n            .select(\"-__v\");\n        if (!updateWorkspaceById) throw new HttpException(409, \"Workspace doesn't exist\");\n\n        return updateWorkspaceById;\n    }\n\n    public async deleteWorkspace(_id: string): Promise<Workspace> {\n        const deleteWorkspaceById: Workspace = await this.workspaces\n            .findByIdAndDelete(_id)\n            .select(\"-__v\");\n        if (!deleteWorkspaceById) throw new HttpException(409, \"Workspace doesn't exist\");\n\n        return deleteWorkspaceById;\n    }\n}"],"names":["WorkspaceServices","findAllWorkspaces","query","workspaces","find","select","findOneWorkspace","_id","isEmpty","HttpException","findWorkspace","findOne","findWorkspaceById","findAllWorkspacesByUserId","userId","createWorkspace","workspaceData","create","updateWorkspace","updateWorkspaceById","findByIdAndUpdate","new","deleteWorkspace","deleteWorkspaceById","findByIdAndDelete","workspaceModel","users","userModel"],"mappings":";;;;;;aAOqBA;;+BAPS;oDACH;+CACL;sBACE;;;;;;;;;;;;;;;;;;;AAIT,IAAA,AAAMA,oBAAN,MAAMA;IAIjB,MAAaC,kBAAkBC,KAAa,EAAwB;QAChE,OAAO,IAAI,CAACC,UAAU,CAACC,IAAI,CAACF,OAAOG,MAAM,CAAC;IAC9C;IAEA,MAAaC,iBAAiBC,GAAW,EAAsB;QAC3D,IAAIC,IAAAA,aAAO,EAACD,MAAM,MAAM,IAAIE,4BAAa,CAAC,KAAK,gBAAgB;QAE/D,MAAMC,gBAA2B,MAAM,IAAI,CAACP,UAAU,CACjDQ,OAAO,CAAC;YAAEJ,KAAKA;QAAI,GACnBF,MAAM,CAAC;QAEZ,IAAI,CAACK,eAAe,MAAM,IAAID,4BAAa,CAAC,KAAK,2BAA2B;QAE5E,OAAOC;IACX;IAEA,MAAaE,kBAAkBL,GAAW,EAAwB;QAC9D,IAAIC,IAAAA,aAAO,EAACD,MAAM,MAAM,IAAIE,4BAAa,CAAC,KAAK,gBAAgB;QAE/D,MAAMC,gBAA6B,MAAM,IAAI,CAACP,UAAU,CACnDC,IAAI,CAAC;YAAEG,KAAKA;QAAI,GAChBF,MAAM,CAAC;QAEZ,IAAI,CAACK,eAAe,MAAM,IAAID,4BAAa,CAAC,KAAK,2BAA2B;QAE5E,OAAOC;IACX;IAEA,MAAaG,0BAA0BC,MAAc,EAAwB;QACzE,IAAIN,IAAAA,aAAO,EAACM,SAAS,MAAM,IAAIL,4BAAa,CAAC,KAAK,mBAAmB;QAErE,MAAMC,gBAA6B,MAAM,IAAI,CAACP,UAAU,CACnDC,IAAI,CAAC;YAAEU,QAAQA;QAAO,GACtBT,MAAM,CAAC;QAEZ,IAAI,CAACK,eAAe,MAAM,IAAID,4BAAa,CAAC,KAAK,2BAA2B;QAE5E,OAAOC;IACX;IAEA,MAAaK,gBAAgBC,aAA8B,EAAsB;QAC7E,IAAIR,IAAAA,aAAO,EAACQ,gBAAgB,MAAM,IAAIP,4BAAa,CAAC,KAAK,0BAA0B;QAEnF,OAAO,IAAI,CAACN,UAAU,CAACc,MAAM,CAACD;IAClC;IAEA,MAAaE,gBAAgBX,GAAW,EAAES,aAAiC,EAAsB;QAC7F,IAAIR,IAAAA,aAAO,EAACQ,gBAAgB,MAAM,IAAIP,4BAAa,CAAC,KAAK,0BAA0B;QAEnF,MAAMU,sBAAiC,MAAM,IAAI,CAAChB,UAAU,CACvDiB,iBAAiB,CAACb,KAAKS,eAAe;YAAEK,KAAK,IAAI;QAAC,GAClDhB,MAAM,CAAC;QACZ,IAAI,CAACc,qBAAqB,MAAM,IAAIV,4BAAa,CAAC,KAAK,2BAA2B;QAElF,OAAOU;IACX;IAEA,MAAaG,gBAAgBf,GAAW,EAAsB;QAC1D,MAAMgB,sBAAiC,MAAM,IAAI,CAACpB,UAAU,CACvDqB,iBAAiB,CAACjB,KAClBF,MAAM,CAAC;QACZ,IAAI,CAACkB,qBAAqB,MAAM,IAAId,4BAAa,CAAC,KAAK,2BAA2B;QAElF,OAAOc;IACX;;QAnEA,uBAAOpB,cAAasB,kBAAc;QAClC,uBAAOC,SAAQC,aAAS;;AAmE5B"}